package com.kemean.service.admin;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.BooleanUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageInfo;
import com.google.common.base.Function;
import com.google.common.collect.Lists;
import com.kemean.bean.DaikenInvestigate;
import com.kemean.bean.DaikenInvestigateOptions;
import com.kemean.bean.DaikenInvestigateQuestion;
import com.kemean.bean.DaikenInvestigateQuestionUser;
import com.kemean.bean.DaikenOrder;
import com.kemean.bean.DaikenUser;
import com.kemean.bean.DaikenUserSales;
import com.kemean.bean.KemeanAdminUser;
import com.kemean.bean.KemeanConfig;
import com.kemean.constant.DaikenConfigEnum;
import com.kemean.constant.DaikenConstant;
import com.kemean.constant.DaikenFinanceTypeClearEnum;
import com.kemean.constant.DaikenInvestigate.DaikenInvestigateTypeEnum;
import com.kemean.constant.DaikenMapData;
import com.kemean.constant.KemeanConstant;
import com.kemean.constant.KemeanDateFormatEnum;
import com.kemean.constant.KemeanFinanceEnum;
import com.kemean.constant.KemeanOrderEnum;
import com.kemean.constant.KemeanPayTypeEnum;
import com.kemean.constant.KemeanTips;
import com.kemean.dao.DaikenInvestigateDao;
import com.kemean.dao.DaikenInvestigateOptionsDao;
import com.kemean.dao.DaikenInvestigateQuestionDao;
import com.kemean.dao.DaikenInvestigateQuestionUserDao;
import com.kemean.dao.DaikenOrderDao;
import com.kemean.dao.DaikenShopDao;
import com.kemean.dao.DaikenUserDao;
import com.kemean.dao.KemeanFinanceClearDao;
import com.kemean.service.common.CommonService;
import com.kemean.service.consumer.CInvestigateService;
import com.kemean.util.DaikenUtil;
import com.kemean.util.KemeanUtilAid;
import com.kemean.vo.bo.KemeanPageAdminBO;
import com.kemean.vo.bo.KemeanResult;
import com.kemean.vo.bo.admin.AdminChartBO;
import com.kemean.vo.bo.admin.investigate.AdminInvestBO;
import com.kemean.vo.bo.admin.investigate.AdminInvestChartBO;
import com.kemean.vo.bo.admin.investigate.AdminInvestOptionsBO;
import com.kemean.vo.bo.admin.investigate.AdminInvestQuestionBO;
import com.kemean.vo.bo.admin.investigate.AdminInvestReportBO;
import com.kemean.vo.bo.admin.investigate.AdminInvestUserFinanceBO;
import com.kemean.vo.bo.admin.user.AdminUserBO;
import com.kemean.vo.mysql.IdAndValueDB;
import com.kemean.vo.po.admin.investigate.AdminInvestChartPO;
import com.kemean.vo.po.admin.investigate.AdminInvestOptionsPO;
import com.kemean.vo.po.admin.investigate.AdminInvestPO;
import com.kemean.vo.po.admin.investigate.AdminInvestReportPO;
import com.kemean.vo.po.admin.investigate.AdminInvestUserFinancePO;
import com.kemean.vo.po.admin.investigate.AdminInvestigateAddPO;
import com.kemean.vo.po.admin.investigate.AdminPrecisionConditionPO;
import com.kemean.vo.po.admin.investigate.AdminPrecisionUserPO;
import com.kemean.vo.po.admin.investigate.AdminQuestionPO;
import com.kemean.vo.po.c.investigate.PostLikePO;
import com.kemean.vo.po.c.investigate.PostVotePO;

@Service
public class AdminInvestigateService {

	@Autowired
	private CInvestigateService cInvestigateService;

	@Autowired
	private DaikenUserDao daikenUserDao;

	@Autowired
	private DaikenShopDao daikenShopDao;

	@Autowired
	private DaikenInvestigateDao daikenInvestigateDao;

	@Autowired
	private DaikenInvestigateOptionsDao daikenInvestigateOptionsDao;

	@Autowired
	private DaikenInvestigateQuestionDao daikenInvestigateQuestionDao;

	@Autowired
	private DaikenInvestigateQuestionUserDao daikenInvestigateQuestionUserDao;

	@Autowired
	private DaikenOrderDao daikenOrderDao;

	@Autowired
	private CommonService commonService;

	@Autowired
	private KemeanFinanceClearDao kemeanFinanceClearDao;

	/**
	 * 调研列表data
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月2日
	 */
	public KemeanPageAdminBO<List<AdminInvestBO>> investListData(AdminInvestPO adminInvestPO, DaikenUser loginer,
			DaikenUserSales loginerSale) {

		List<Integer> typeList = new ArrayList<>();
		if (adminInvestPO.getType() == null) {
			typeList = Arrays.asList(DaikenInvestigateTypeEnum.POST_LIKE.getType(),
					DaikenInvestigateTypeEnum.POST_VOTE.getType(), DaikenInvestigateTypeEnum.QUESTIONNAIRE.getType());
		} else {
			typeList.add(adminInvestPO.getType());
		}
		List<Integer> userId = new ArrayList<>();
		if (loginer != null) {
			userId.add(loginer.getId());
		}
		// 销售
		if (loginerSale != null) {
			List<DaikenUser> dbUser = daikenUserDao.selectByProperties(
					new String[] { KemeanConstant.DATA_DELETED, "referralCode" },
					new Object[] { false, loginerSale.getReferralCode() });
			for (DaikenUser daikenUser : dbUser) {
				userId.add(daikenUser.getId());
			}
		}

		List<DaikenInvestigate> dbInvestList = daikenInvestigateDao.adminInvestigateList(
				adminInvestPO.getInitiatorUnit(), typeList, userId, adminInvestPO.getPage(), adminInvestPO.getLimit());

		List<AdminInvestBO> result = Lists.transform(dbInvestList, new Function<DaikenInvestigate, AdminInvestBO>() {

			@Override
			public AdminInvestBO apply(DaikenInvestigate input) {
				AdminInvestBO bo = new AdminInvestBO();
				BeanUtils.copyProperties(input, bo);
				DaikenUser dbUser = daikenUserDao.selectById(input.getUserId());
				if(dbUser!=null) {
					bo.setNickName(dbUser.getNickName());
				}
				bo.setTypeStr(DaikenMapData.investType.get(input.getType()));
				bo.setPayStatusStr(BooleanUtils.isTrue(input.getPayStatus()) ? "支付成功" : "待支付");
				return bo;
			}
		});
		return new KemeanPageAdminBO<List<AdminInvestBO>>(new PageInfo<>(dbInvestList).getTotal(), result);
	}

	/**
	 * 监听调研上下架状态
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月2日
	 */
	@Transactional
	public KemeanResult<String> investStatusOperate(Integer objId, Boolean status, KemeanAdminUser loginer) {
		Integer adminUserId = 0;
		if (loginer != null) {
			adminUserId = loginer.getId();
		}
		DaikenInvestigate dbInvest = daikenInvestigateDao.selectById(objId);
		dbInvest.setInvestigateStatus(status);
		dbInvest.setUpdateTime(new Date());
		dbInvest.setAdminUserId(adminUserId);
		daikenInvestigateDao.updateByPrimaryKeySelective(dbInvest);
		return new KemeanResult<>(true, KemeanTips.Operate.OPERATE_SUCCESS);
	}

	/**
	 * 发布/修改 点赞
	 * 
	 * @author tanggengxiang
	 * @date 2018年6月28日
	 */
	public KemeanResult<String> investLikeOperate(AdminInvestigateAddPO adminInvestigateAddPO, DaikenUser loginer) {
		PostLikePO postLikePO = new PostLikePO();
		BeanUtils.copyProperties(adminInvestigateAddPO, postLikePO);
		Integer userId = null;
		if (loginer != null) {
			userId = loginer.getId();
		} else {
			userId = adminInvestigateAddPO.getUserId();
		}
		DaikenUser dbUser = daikenUserDao.selectById(userId);
		cInvestigateService.postLike(postLikePO, dbUser, DaikenConstant.back_ground_issue);
		return new KemeanResult<>(true, KemeanTips.Operate.OPERATE_SUCCESS);
	}

	/**
	 * 发布/修改 投票
	 * 
	 * @author tanggengxiang
	 * @date 2018年6月28日
	 */

	public KemeanResult<String> investVoteOperate(AdminInvestigateAddPO adminInvestigateAddPO, DaikenUser loginer) {

		PostVotePO postVotePO = new PostVotePO();
		BeanUtils.copyProperties(adminInvestigateAddPO, postVotePO);

		Integer userId = null;
		if (loginer != null) {
			userId = loginer.getId();
		} else {
			userId = adminInvestigateAddPO.getUserId();
		}
		DaikenUser dbUser = daikenUserDao.selectById(userId);
		cInvestigateService.postVote(postVotePO, dbUser, DaikenConstant.back_ground_issue);
		return new KemeanResult<>(true, KemeanTips.Operate.OPERATE_SUCCESS);
	}

	/**
	 * 发布/修改问题
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月4日
	 */
	@Transactional
	public KemeanResult<String> investQuestionOperate(AdminInvestigateAddPO adminInvestigateAddPO, DaikenUser loginer) {

		Integer userId = null;
		String shopName = "";
		if (loginer != null) {
			userId = loginer.getId();
			shopName = daikenShopDao.selectById(loginer.getShopId()).getShopName();

		} else {
			userId = adminInvestigateAddPO.getUserId();
		}

		DaikenUser dbUser = daikenUserDao.selectById(userId);
		Date now = new Date();
		DaikenInvestigate investigate = null;
		boolean flag = false;
		if (adminInvestigateAddPO.getObjId() == null) {
			flag = true;
		}

		if (flag) {
			investigate = new DaikenInvestigate();
			investigate.setType(DaikenInvestigateTypeEnum.QUESTIONNAIRE.getType());
			// 默认为下架状态
			investigate.setInvestigateStatus(false);
		} else {
			investigate = daikenInvestigateDao.selectById(adminInvestigateAddPO.getObjId());
		}
		BeanUtils.copyProperties(adminInvestigateAddPO, investigate);
		if (CollectionUtils.isNotEmpty(adminInvestigateAddPO.getAdvertisingImg())) {
			investigate.setAdvertisingImg(
					DaikenUtil.parseJSONArrayByList(adminInvestigateAddPO.getAdvertisingImg()).toString());
		}
		if (CollectionUtils.isNotEmpty(adminInvestigateAddPO.getInvestigateImg())) {
			investigate.setInvestigateImg(
					DaikenUtil.parseJSONArrayByList(adminInvestigateAddPO.getInvestigateImg()).toString());
		}
		// TODO 默认为已支付
		investigate.setPayStatus(true);
		investigate.setUserId(dbUser.getId());
		investigate.setJumpType(adminInvestigateAddPO.getJumpType());
		investigate.setJumpTypeId(adminInvestigateAddPO.getJumpTypeId());
		investigate.setUserUId(dbUser.getUid());
		investigate.setCreateTime(now);
		investigate.setUpdateTime(now);
		if (!flag) {
			daikenInvestigateDao.updateByPrimaryKeySelective(investigate);
		}
		if (flag) {
			daikenInvestigateDao.saveSelective(investigate);
		}

		// 添加问题
		List<AdminQuestionPO> adminQuestionPOList = adminInvestigateAddPO.getAdminQuestionPOs();
		if (CollectionUtils.isNotEmpty(adminQuestionPOList)) {

			for (AdminQuestionPO adminQuestion : adminQuestionPOList) {
				DaikenInvestigateQuestion investigateQuestion = new DaikenInvestigateQuestion();
				investigateQuestion.setInvestigateId(investigate.getId());
				investigateQuestion.setQuestion(adminQuestion.getQuestion());
				if (!adminQuestion.getIdAndValueDB().isEmpty()) {
					investigateQuestion.setRecordAnswer(JSONArray.toJSONString(adminQuestion.getIdAndValueDB()));
				} else {
					investigateQuestion.setRecordAnswer("");
				}
				investigateQuestion.setType(adminQuestion.getType());
				investigateQuestion.setDataDeleted(false);
				investigateQuestion.setCreateTime(now);
				investigateQuestion.setUpdateTime(now);
				daikenInvestigateQuestionDao.saveSelective(investigateQuestion);
			}
		}

		DaikenOrder dbOrder = daikenOrderDao.selectUniqueEntityByProperties(
				new String[] { KemeanConstant.DATA_DELETED, "idInvestigate" },
				new Object[] { false, investigate.getId() });
		if (dbOrder == null) {
			KemeanConfig config = commonService.getConfig(DaikenConfigEnum.INVESTIGATE_CHARGE);
			Integer investigateCharge = Integer.valueOf(config.getRecord());
			Double pricePay = adminInvestigateAddPO.getMaxPeopleNum() * adminInvestigateAddPO.getRewardPrice()
					+ investigateCharge;
			// 生成订单
			String orderNo = DaikenUtil.getOrderNo(now);
			DaikenOrder newOrder = createInvestigateOrder(orderNo, dbUser.getId(), shopName, investigate.getId(),
					dbUser.getPhone(), pricePay, now);
			daikenOrderDao.saveSelective(newOrder);
		}
		return new KemeanResult<>(true, KemeanTips.Operate.OPERATE_SUCCESS);
	}

	/**
	 * 删除调研信息
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月2日
	 */

	@Transactional
	public KemeanResult<String> investDel(Integer objId) {
		DaikenInvestigate dbInvest = daikenInvestigateDao.selectById(objId);
		dbInvest.setDataDeleted(true);
		daikenInvestigateDao.updateByPrimaryKeySelective(dbInvest);

		daikenInvestigateOptionsDao.updateEntityByProperties(new String[] { KemeanConstant.DATA_DELETED, "updateTime" },
				new Object[] { true, new Date() }, "investigateId", objId);

		daikenInvestigateQuestionDao.updateEntityByProperties(
				new String[] { KemeanConstant.DATA_DELETED, "updateTime" }, new Object[] { true, new Date() },
				"investigateId", objId);

		return new KemeanResult<>(true, KemeanTips.Operate.DELETE_SUCCESS);
	}

	/**
	 * 点赞/投票/问卷 详情
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月2日
	 */
	public AdminInvestBO investLikeInfo(Integer objId, Integer type) {
		AdminInvestBO bo = new AdminInvestBO();
		DaikenInvestigate dbInvest = daikenInvestigateDao.selectUniqueEntityByProperties(
				new String[] { KemeanConstant.DATA_DELETED, "id", "type" }, new Object[] { false, objId, type });

		BeanUtils.copyProperties(dbInvest, bo);

		if (StringUtils.isNoneBlank(dbInvest.getAdvertisingImg())) {
			bo.setAdvertisingImg(JSONArray.parseArray(dbInvest.getAdvertisingImg(), String.class));
		}

		if (StringUtils.isNoneBlank(dbInvest.getInvestigateImg())) {
			bo.setInvestigateImg(JSONArray.parseArray(dbInvest.getInvestigateImg(), String.class));
		}
		bo.setTypeStr(DaikenMapData.investType.get(bo.getType()));
		bo.setNickName(daikenUserDao.selectById(dbInvest.getUserId()).getNickName());
		bo.setEndTimeStr(KemeanUtilAid.formatDate(dbInvest.getEndTime(), KemeanDateFormatEnum.NORMAL));

		List<DaikenInvestigateQuestion> dbQuestion = daikenInvestigateQuestionDao.selectByProperties(
				new String[] { KemeanConstant.DATA_DELETED, "investigateId" },
				new Object[] { false, dbInvest.getId() });

		if (!dbQuestion.isEmpty()) {
			List<AdminInvestQuestionBO> questionList = new ArrayList<>(dbQuestion.size());
			for (DaikenInvestigateQuestion daikenInvestigateQuestion : dbQuestion) {
				AdminInvestQuestionBO questionBO = new AdminInvestQuestionBO();
				BeanUtils.copyProperties(daikenInvestigateQuestion, questionBO);
				if (StringUtils.isNoneBlank(daikenInvestigateQuestion.getRecordAnswer())) {
					questionBO.setRecordAnswer(
							JSONArray.parseArray(daikenInvestigateQuestion.getRecordAnswer(), IdAndValueDB.class));

				}
				questionBO.setTypeStr(DaikenMapData.investQuestionType.get(daikenInvestigateQuestion.getType()));
				questionList.add(questionBO);
			}
			bo.setInvestQuestionBO(questionList);
		}
		return bo;
	}

	/**
	 * 投票 选手列表
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月2日
	 */

	public KemeanPageAdminBO<List<AdminInvestOptionsBO>> invsetVotePlayerData(Integer objId, Integer page,
			Integer limit) {
		List<DaikenInvestigateOptions> dbInvestOptions = daikenInvestigateOptionsDao.selectByProperties(
				new String[] { "investigateId", KemeanConstant.DATA_DELETED }, new Object[] { objId, false }, "id",
				false, page, limit);

		List<AdminInvestOptionsBO> result = Lists.transform(dbInvestOptions,
				new Function<DaikenInvestigateOptions, AdminInvestOptionsBO>() {

					@Override
					public AdminInvestOptionsBO apply(DaikenInvestigateOptions input) {
						AdminInvestOptionsBO bo = new AdminInvestOptionsBO();
						BeanUtils.copyProperties(input, bo);
						if (StringUtils.isNoneBlank(input.getImg())) {
							bo.setImg(JSONArray.parseArray(input.getImg(), String.class).get(0));
						}
						return bo;
					}
				});
		return new KemeanPageAdminBO<List<AdminInvestOptionsBO>>(new PageInfo<>(dbInvestOptions).getTotal(), result);
	}

	/**
	 * 修改选手信息
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月2日
	 */

	@Transactional
	public KemeanResult<String> invsetVotePlayerEdit(AdminInvestOptionsPO adminInvestOptionsPO) {
		DaikenInvestigateOptions dbInvestOptions = daikenInvestigateOptionsDao
				.selectById(adminInvestOptionsPO.getObjId());
		BeanUtils.copyProperties(adminInvestOptionsPO, dbInvestOptions);
		dbInvestOptions.setUpdateTime(new Date());
		daikenInvestigateOptionsDao.updateByPrimaryKeySelective(dbInvestOptions);
		return new KemeanResult<>(true, KemeanTips.Operate.UPDATE_SUCCESS);
	}

	/**
	 * （点赞、投票）报表data
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月3日
	 */
	public KemeanPageAdminBO<List<AdminInvestReportBO>> investReportData(AdminInvestReportPO adminInvestReportPO,
			DaikenUser loginer) {

		List<DaikenInvestigate> dbInvest = daikenInvestigateDao.investigateReport(adminInvestReportPO.getType(),
				loginer.getId(), adminInvestReportPO.getResult(), adminInvestReportPO.getTitle(),
				adminInvestReportPO.getPage(), adminInvestReportPO.getLimit());

		List<AdminInvestReportBO> result = Lists.transform(dbInvest,
				new Function<DaikenInvestigate, AdminInvestReportBO>() {

					@Override
					public AdminInvestReportBO apply(DaikenInvestigate input) {
						AdminInvestReportBO bo = new AdminInvestReportBO();
						DaikenOrder dbOrder = daikenOrderDao.selectUniqueEntityByProperties(
								new String[] { KemeanConstant.DATA_DELETED, "idInvestigate" },
								new Object[] { false, input.getId() });
						BeanUtils.copyProperties(input, bo);
						if (dbOrder != null) {
							bo.setPayPrice(dbOrder.getPricePay());
							bo.setRewardPrice(input.getRewardPrice());
						}
						bo.setResult(BooleanUtils.isTrue(input.getEndTime().getTime() <= new Date().getTime()) ? "完成"
								: "未完成");
						KemeanConfig config = commonService.getConfig(DaikenConfigEnum.INVESTIGATE_CHARGE);
						bo.setPlatformPrice(Double.valueOf(config.getRecord()));
						return bo;
					}
				});
		return new KemeanPageAdminBO<List<AdminInvestReportBO>>(new PageInfo<>(dbInvest).getTotal(), result);
	}

	/**
	 * 查询结果统计
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月3日
	 */
	public AdminInvestChartBO investResultChart(String date, DaikenUser loginer) {
		AdminInvestChartBO bo = new AdminInvestChartBO();
		// TODO 优化
		Integer userId = null;
		if (loginer != null) {
			userId = loginer.getId();
		}

		Date endTime = null;
		if (StringUtils.isBlank(date)) {
			endTime = new Date();
		} else {
			endTime = KemeanUtilAid.parseDate(date, KemeanDateFormatEnum.NORMAL);
		}
		// 点赞
		Integer likeComplete = daikenInvestigateDao
				.selectInvestResultCount(DaikenInvestigateTypeEnum.POST_LIKE.getType(), userId, endTime, true);

		Integer likeNoComplete = daikenInvestigateDao
				.selectInvestResultCount(DaikenInvestigateTypeEnum.POST_LIKE.getType(), userId, endTime, false);
		bo.setLikeComplete(likeComplete);
		bo.setLikeNoComplete(likeNoComplete);

		// 投票
		Integer voteComplete = daikenInvestigateDao
				.selectInvestResultCount(DaikenInvestigateTypeEnum.POST_VOTE.getType(), userId, endTime, true);

		Integer voteNoComplete = daikenInvestigateDao
				.selectInvestResultCount(DaikenInvestigateTypeEnum.POST_VOTE.getType(), userId, endTime, false);
		bo.setVoteComplete(voteComplete);
		bo.setVoteNoComplete(voteNoComplete);

		// 问卷调查
		Integer questionnaireComplete = daikenInvestigateDao
				.selectInvestResultCount(DaikenInvestigateTypeEnum.QUESTIONNAIRE.getType(), userId, endTime, true);

		Integer questionnaireNoComplete = daikenInvestigateDao
				.selectInvestResultCount(DaikenInvestigateTypeEnum.QUESTIONNAIRE.getType(), userId, endTime, false);

		bo.setQuestionnaireComplete(questionnaireComplete);
		bo.setQuestionnaireNoComplete(questionnaireNoComplete);
		return bo;
	}

	/**
	 * 调研 点赞活动统计
	 * 
	 * @author tanggengxiang
	 * @date 2018年5月12日
	 */
	public AdminInvestChartBO investDayChartData(AdminInvestChartPO adminChartsPO, int defaultDataNum,
			DaikenUser loginer) {
		AdminInvestChartBO bo = new AdminInvestChartBO();
		// 数量
		Integer userId = null;
		if (loginer != null) {
			userId = loginer.getId();
		}
		List<AdminChartBO> dbChart = daikenInvestigateDao.selectDayQuantity(adminChartsPO.getType(), userId,
				adminChartsPO.getDateStart(), adminChartsPO.getDateEnd(), defaultDataNum);
		bo.setQuantityChart(dbChart);
		// 平台佣金
		KemeanConfig config = commonService.getConfig(DaikenConfigEnum.INVESTIGATE_CHARGE);
		Double investigateCharge = Double.parseDouble(config.getRecord());
		List<AdminChartBO> platformMoneyChart = new ArrayList<>(dbChart.size());
		for (AdminChartBO adminChartBO : dbChart) {
			platformMoneyChart.add(new AdminChartBO(investigateCharge * adminChartBO.getY(), adminChartBO.getName()));
		}

		// 参与人数
		dbChart = daikenInvestigateDao.selectDayUserNum(adminChartsPO.getType(), userId, adminChartsPO.getDateStart(),
				adminChartsPO.getDateEnd(), defaultDataNum);
		bo.setUserNumChart(dbChart);

		// 用户佣金
		dbChart = daikenInvestigateDao.selectDayUserMoney(adminChartsPO.getType(), userId, adminChartsPO.getDateStart(),
				adminChartsPO.getDateEnd(), defaultDataNum);

		List<AdminChartBO> playMoneyChart = new ArrayList<>(dbChart.size());
		// 所需费用=平台佣金+用户佣金
		for (AdminChartBO item : dbChart) {
			for (AdminChartBO chartbo : platformMoneyChart) {
				playMoneyChart.add(new AdminChartBO(chartbo.getY() + item.getY(), item.getName()));
			}
		}
		bo.setUserMoneyChart(dbChart);
		bo.setPayMoneyChart(playMoneyChart);
		bo.setPlatformMoneyChart(platformMoneyChart);

		return bo;
	}

	/**
	 * 调研客户统计
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月9日
	 */
	public AdminInvestChartBO investUserCountData(AdminInvestChartPO adminChartsPO, int defaultDataNum) {
		AdminInvestChartBO bo = new AdminInvestChartBO();
		// 点赞--用户
		Integer dbNum = daikenInvestigateDao.selectUserNum(DaikenInvestigateTypeEnum.POST_LIKE.getType(),
				adminChartsPO.getDateStart(), adminChartsPO.getDateEnd(), defaultDataNum);
		bo.setLikeUserNum(dbNum);
		// 点赞 类型数量
		dbNum = daikenInvestigateDao.selectInvestTypeNum(DaikenInvestigateTypeEnum.POST_LIKE.getType(),
				adminChartsPO.getDateStart(), adminChartsPO.getDateEnd());
		bo.setLikeNum(dbNum);
		// 投票--用户
		dbNum = daikenInvestigateDao.selectUserNum(DaikenInvestigateTypeEnum.POST_VOTE.getType(),
				adminChartsPO.getDateStart(), adminChartsPO.getDateEnd(), defaultDataNum);
		bo.setVoteUserNum(dbNum);
		// 点赞 类型数量
		dbNum = daikenInvestigateDao.selectInvestTypeNum(DaikenInvestigateTypeEnum.POST_VOTE.getType(),
				adminChartsPO.getDateStart(), adminChartsPO.getDateEnd());
		bo.setVoteNum(dbNum);
		// 问卷 -用户
		dbNum = daikenInvestigateDao.selectUserNum(DaikenInvestigateTypeEnum.QUESTIONNAIRE.getType(),
				adminChartsPO.getDateStart(), adminChartsPO.getDateEnd(), defaultDataNum);
		bo.setQuestionUserNum(dbNum);
		// 问卷类型数量
		dbNum = daikenInvestigateDao.selectInvestTypeNum(DaikenInvestigateTypeEnum.QUESTIONNAIRE.getType(),
				adminChartsPO.getDateStart(), adminChartsPO.getDateEnd());
		bo.setQuestionNum(dbNum);
		return bo;

	}

	/**
	 * 问卷调查 精准投放用户
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月12日
	 */
	public KemeanPageAdminBO<List<AdminUserBO>> precisionPutUserData(
			AdminPrecisionConditionPO adminPrecisionConditionPO) {
		List<Integer> userJobIds = null;
		if (StringUtils.isNoneBlank(adminPrecisionConditionPO.getUserJobId())) {
			String[] split = adminPrecisionConditionPO.getUserJobId().split(",");
			userJobIds = new ArrayList<>(split.length);
			for (String jobId : split) {
				userJobIds.add(Integer.valueOf(jobId));
			}

		}
		List<DaikenUser> dbUser = daikenUserDao.selectPutUser(userJobIds, adminPrecisionConditionPO.getUserSex(),
				adminPrecisionConditionPO.getPage(), adminPrecisionConditionPO.getLimit());

		List<AdminUserBO> result = new ArrayList<>(dbUser.size());
		for (DaikenUser daikenUser : dbUser) {
			AdminUserBO bo = new AdminUserBO();

			if (StringUtils.isNoneBlank(adminPrecisionConditionPO.getInterestId())) {
				if (StringUtils.isNoneBlank(daikenUser.getHobbiesInterests())) {
					List<Integer> parseHobbies = JSONArray.parseArray(daikenUser.getHobbiesInterests(), Integer.class);

					String[] split = adminPrecisionConditionPO.getInterestId().split(",");
					for (String ids : split) {
						if (parseHobbies.contains(Integer.valueOf(ids))) {
							BeanUtils.copyProperties(daikenUser, bo);
							bo.setUserTypeStr(DaikenMapData.userType.get(daikenUser.getUserType()));

							if (!result.contains(bo)) {
								result.add(bo);
							}
						}
					}
				}

			} else {
				BeanUtils.copyProperties(daikenUser, bo);
				bo.setUserTypeStr(DaikenMapData.userType.get(daikenUser.getUserType()));
				result.add(bo);
			}

		}

		return new KemeanPageAdminBO<List<AdminUserBO>>(new PageInfo<>(result).getTotal(), result);
	}

	/**
	 * 保存推送用户
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月12日
	 */

	@Transactional
	public KemeanResult<String> precisionOperate(AdminPrecisionUserPO adminPrecisionUserPO) {

		Date now = new Date();
		DaikenInvestigate dbInvest = daikenInvestigateDao.selectById(adminPrecisionUserPO.getInvestId());
		dbInvest.setMatchCondition(JSONObject.toJSONString(adminPrecisionUserPO.getMatchCondition()));
		dbInvest.setUpdateTime(now);
		daikenInvestigateDao.updateByPrimaryKeySelective(dbInvest);

		List<Integer> userId = adminPrecisionUserPO.getUserIds();
		for (Integer item : userId) {
			DaikenUser dbUser = daikenUserDao.selectById(item);
			DaikenInvestigateQuestionUser newQuestionUser = new DaikenInvestigateQuestionUser();
			newQuestionUser.setUserId(item);
			newQuestionUser.setNickName(dbUser.getNickName());
			newQuestionUser.setPhone(dbUser.getPhone());
			newQuestionUser.setSexMan(dbUser.getSexMan());
			newQuestionUser.setInvestigateId(adminPrecisionUserPO.getInvestId());
			newQuestionUser.setUpdateTime(now);
			newQuestionUser.setCreateTime(now);
			daikenInvestigateQuestionUserDao.saveSelective(newQuestionUser);
		}
		return new KemeanResult<>(true, KemeanTips.Operate.OPERATE_SUCCESS);
	}

	/**
	 * 调研客户流水统计
	 * 
	 * @author tanggengxiang
	 * @date 2018年7月23日
	 */
	public AdminInvestUserFinanceBO investUserFinanceData(AdminInvestUserFinancePO adminInvestUserFinancePO,
			int limit) {

		AdminInvestUserFinanceBO bo = new AdminInvestUserFinanceBO();
		List<DaikenInvestigate> dbInvest = daikenInvestigateDao.selectByProperties(
				new String[] { KemeanConstant.DATA_DELETED, "userUId" },
				new Object[] { false, adminInvestUserFinancePO.getUserUid() });

		List<Integer> userId = new ArrayList<>(dbInvest.size());
		if (!dbInvest.isEmpty()) {
			for (DaikenInvestigate item : dbInvest) {
				userId.add(item.getUserId());
			}
		} else {
			userId.add(00);
		}

		// 充值金额
		List<AdminChartBO> dbFinance = kemeanFinanceClearDao.selectShopFinanceSum(
				Arrays.asList(DaikenFinanceTypeClearEnum.RECHARGE.getType()),
				KemeanFinanceEnum.FinanceStatusEnum.SUCCESS.getStatus(), userId,
				adminInvestUserFinancePO.getDateStart(), adminInvestUserFinancePO.getDateEnd(), limit);
		bo.setRechargeMoney(dbFinance);

		// 提现金额
		dbFinance = kemeanFinanceClearDao.selectShopFinanceSum(
				Arrays.asList(DaikenFinanceTypeClearEnum.CASE_USER.getType(),
						DaikenFinanceTypeClearEnum.CASH_SHOP.getType()),
				KemeanFinanceEnum.FinanceStatusEnum.SUCCESS.getStatus(), userId,
				adminInvestUserFinancePO.getDateStart(), adminInvestUserFinancePO.getDateEnd(), limit);

		return bo;
	}

	/**
	 * 创建一个新订单
	 * 
	 * @author huwei
	 * @date 2018年6月22日
	 */
	private DaikenOrder createInvestigateOrder(String orderNo, Integer userId, String shopName, Integer investigateId,
			String userPhone, Double pricePay, Date now) {
		DaikenOrder newOrder = new DaikenOrder();
		newOrder.setOrderNo(orderNo);
		newOrder.setIdUser(userId);
		newOrder.setIdInvestigate(investigateId);
		newOrder.setIdPurchasing(0);
		newOrder.setStatusShop(KemeanOrderEnum.OrderStatusBusiness.WAIT_PAY.getStatus());
		newOrder.setStatusUser(KemeanOrderEnum.OrderStatusUser.NEW_WIAT_PAY.getStatus());
		newOrder.setUserPhone(userPhone);
		newOrder.setQuantity(1);
		newOrder.setPricePay(pricePay);
		newOrder.setPriceDiscount(0.0);
		newOrder.setPriceTotal(pricePay);
		newOrder.setPostage(0.0);
		newOrder.setShopName(shopName);
		newOrder.setIsNewGoods(false);
		newOrder.setPayType(KemeanPayTypeEnum.NO_SET.getType());
		newOrder.setRecordReceiving("该订单为调研订单，没有收货地址");
		newOrder.setRecordLogistics("该订单为调研订单，没有快递公司信息");
		newOrder.setCreateYearMonth(KemeanUtilAid.formatDate(now, KemeanDateFormatEnum.YEAR_MONTH));
		newOrder.setCreateTime(now);
		newOrder.setUpdateTime(now);
		return newOrder;
	}

}
