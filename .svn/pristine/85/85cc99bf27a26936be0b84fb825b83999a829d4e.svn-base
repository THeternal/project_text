package com.kemean.util;

import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

/**
 * 代研项目工具类
 * 
 * @Date 2018年6月1日
 *
 * @company 深圳科名网络有限公司 {@link www.kemean.com}
 */
public class DaikenUtil extends KemeanUtilWeb {

	public static void main(String[] args) {
		int num1 = 7;
		int num2 = 9;
		// 创建一个数值格式化对象
		NumberFormat numberFormat = NumberFormat.getInstance();
		// 设置精确到小数点后2位
		numberFormat.setMaximumFractionDigits(2);
		String result = numberFormat.format((float) num1 / (float) num2 * 100);
		System.out.println("num1和num2的百分比为:" + result + "%");
	}

	/**
	 * 规格1-内容1 规格2-内容2
	 * 
	 * @author huwei
	 * @date 2018年6月29日
	 */
	public static String parseJsonArray(String jsonArray) {
		String recordType = "";
		JSONArray jsonArra = JSONObject.parseArray(jsonArray);
		for (int i = 0; i < jsonArra.size(); i++) {
			JSONObject obj = (JSONObject) JSONObject.toJSON(jsonArra.get(i));
			Iterator<Entry<String, Object>> it = obj.entrySet().iterator();
			while (it.hasNext()) {
				Entry<String, Object> entry = it.next();
				recordType += entry.getKey() + "-" + entry.getValue() + "   ";
			}
		}
		return recordType;
	}

	/**
	 * 指定日期加上天数后的日期
	 * 
	 * @param num
	 *            为增加的天数
	 * @param newDate
	 *            创建时间
	 * @return
	 */
	public static Date plusDay(int num, Date newDate) {
		Calendar ca = Calendar.getInstance();
		ca.add(Calendar.DATE, num);
		Date enddate = ca.getTime();
		return enddate;
	}

	/**
	 * String 转 JSONObject
	 * 
	 * @author huwei
	 * @date 2018年6月29日
	 */
	public static JSONObject parseJsonObject(String jsonArray) {
		JSONObject result = new JSONObject();
		JSONArray jsonArra = JSONObject.parseArray(jsonArray);
		for (int i = 0; i < jsonArra.size(); i++) {
			JSONObject obj = (JSONObject) JSONObject.toJSON(jsonArra.get(i));
			Iterator<Entry<String, Object>> it = obj.entrySet().iterator();
			while (it.hasNext()) {
				Entry<String, Object> entry = it.next();
				result.put(entry.getKey(), entry.getValue());
			}
		}
		return result;
	}

	/**
	 * 判断是否是订单编号
	 */
	public static Boolean isOrderNo(String keyWord) {
		Pattern pattern = Pattern.compile("[0-9]{1,}");
		Matcher matcher = pattern.matcher((CharSequence) keyWord);
		return matcher.matches();
	}

	/**
	 * 当前时间加年份
	 */
	public static Date addYear(Date date, Integer year) {
		Calendar c = Calendar.getInstance();
		date = c.getTime();
		c.add(Calendar.YEAR, year);
		return c.getTime();
	}

	/**
	 * list转换成JsonArray
	 */
	public static JSONArray parseJSONArrayByList(List<?> list) {
		JSONArray jsonArray = new JSONArray();
		if (list == null || list.isEmpty()) {
			return jsonArray;
		}
		for (Object object : list) {
			jsonArray.add(object);
		}
		return jsonArray;
	}

	/**
	 * @param 日期相差天数
	 */
	public static Integer dateDifference(Date smdate, Date bdate) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		try {
			smdate = sdf.parse(sdf.format(smdate));
			bdate = sdf.parse(sdf.format(bdate));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		Calendar cal = Calendar.getInstance();
		cal.setTime(smdate);
		long time1 = cal.getTimeInMillis();
		cal.setTime(bdate);
		long time2 = cal.getTimeInMillis();
		long between_days = (time2 - time1) / (1000 * 3600 * 24);

		return Integer.parseInt(String.valueOf(between_days));
	}

	/** 获取两个时间差 **/
	public static String getTwoDayMinuteStr(Date frontDay, Date backDay) {
		int twoDayMinute = getTwoDayMinute(frontDay, backDay);
		if (twoDayMinute < 60) {
			return twoDayMinute + "分钟前";
		}
		if (twoDayMinute >= 60 && 1440 >= twoDayMinute) {
			return twoDayMinute / 60 + "小时前";
		}

		if (twoDayMinute > 1440) {
			return twoDayMinute / 1440 + "天前";
		}

		return "";
	}

}
