package com.kemean.service.business;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageInfo;
import com.kemean.bean.DaikenOrder;
import com.kemean.bean.DaikenOrderAfterSale;
import com.kemean.bean.DaikenOrderGoods;
import com.kemean.bean.DaikenUser;
import com.kemean.constant.KemeanConstant;
import com.kemean.constant.KemeanOrderEnum;
import com.kemean.dao.DaikenOrderAfterSaleDao;
import com.kemean.dao.DaikenOrderDao;
import com.kemean.dao.DaikenOrderGoodsDao;
import com.kemean.service.consumer.COrderService;
import com.kemean.util.DaikenUtil;
import com.kemean.vo.bo.KemeanPageApiBO;
import com.kemean.vo.bo.KemeanResult;
import com.kemean.vo.bo.b.order.CourierCompanyBO;
import com.kemean.vo.bo.b.order.OrderListBO;
import com.kemean.vo.bo.b.order.OrderListGoodsBO;
import com.kemean.vo.bo.b.order.RefundCauseBO;
import com.kemean.vo.mysql.GoodsRecordDB;
import com.kemean.vo.mysql.UserAddressDB;
import com.kemean.vo.po.b.order.OrderListPO;
import com.kemean.vo.po.b.order.SendGoodsPO;

/**
 * 【商户端】订单业务层
 * 
 * @Date 2018年6月6日
 *
 * @company 深圳科名网络有限公司 {@link www.kemean.com}
 */
@Service
public class BOrderService {

	@Autowired
	private DaikenOrderDao daikenOrderDao;

	@Autowired
	private DaikenOrderGoodsDao daikenOrderGoodsDao;

	@Autowired
	private DaikenOrderAfterSaleDao daikenOrderAfterSaleDao;

	@Autowired
	private COrderService corderService;

	/**
	 * 订单列表
	 * 
	 * @author huwei
	 * @date 2018年6月6日
	 */
	public KemeanPageApiBO<List<OrderListBO>> orderList(OrderListPO orderListPO, DaikenUser loginBusiness) {
		Integer orderStatus = orderListPO.getOrderStatus() == null
				? KemeanOrderEnum.OrderStatusBusiness.ACCEPT.getStatus()
				: orderListPO.getOrderStatus();
		List<OrderListBO> result = new ArrayList<OrderListBO>();
		String keyWord = "";
		if (orderListPO.getKeyword() != null && StringUtils.isNotBlank(orderListPO.getKeyword())) {
			keyWord = orderListPO.getKeyword();
		}
		List<DaikenOrder> dbOrders = daikenOrderDao.orderListBusiness(keyWord, loginBusiness.getShopId(), orderStatus,
				orderListPO.getPageNo(), orderListPO.getPageSize());
		if (CollectionUtils.isEmpty(dbOrders)) {
			return new KemeanPageApiBO<List<OrderListBO>>(0l, 1, result);
		}
		for (DaikenOrder daikenOrder : dbOrders) {
			OrderListBO bo = new OrderListBO();
			BeanUtils.copyProperties(daikenOrder, bo);
			bo.setStatusShopStr(getBusinessStatusStr(daikenOrder.getStatusShop()));
			UserAddressDB userAddressDB = JSONObject.parseObject(daikenOrder.getRecordReceiving(), UserAddressDB.class);
			BeanUtils.copyProperties(userAddressDB, bo);
			bo.setReceiveAddress(
					userAddressDB.getProvinceName() + userAddressDB.getAreaName() + userAddressDB.getAddress());
			List<OrderListGoodsBO> goods = new ArrayList<OrderListGoodsBO>();
			List<DaikenOrderGoods> dbOrderGoodss = daikenOrderGoodsDao.selectByProperties(
					new String[] { KemeanConstant.DATA_DELETED, "orderNo" },
					new Object[] { false, daikenOrder.getOrderNo() });
			for (DaikenOrderGoods daikenOrderGoods : dbOrderGoodss) {
				OrderListGoodsBO goodsBO = new OrderListGoodsBO();
				GoodsRecordDB goodsRecordDB = JSONObject.parseObject(daikenOrderGoods.getGoodsRecord(),
						GoodsRecordDB.class);
				BeanUtils.copyProperties(goodsRecordDB, goodsBO);
				BeanUtils.copyProperties(daikenOrderGoods, goodsBO);
				goodsBO.setRecordType(DaikenUtil.parseJsonArray(goodsRecordDB.getRecordType()));
				goods.add(goodsBO);
			}
			bo.setGoods(goods);
			result.add(bo);
		}
		PageInfo<DaikenOrder> pageInfo = new PageInfo<DaikenOrder>(dbOrders);
		return new KemeanPageApiBO<List<OrderListBO>>(pageInfo.getTotal(), pageInfo.getPages(), result);
	}

	/**
	 * 订单删除
	 * 
	 * @author huwei
	 * @date 2018年6月6日
	 */
	public KemeanResult<String> delOrder(String orderNo, DaikenUser loginBusiness) {
		DaikenOrder dbOrder = daikenOrderDao.selectUniqueEntityByProperty("orderNo", orderNo);
		dbOrder.setDeletedShop(true);
		dbOrder.setUpdateTime(new Date());
		daikenOrderDao.updateByPrimaryKeySelective(dbOrder);
		return new KemeanResult<String>();
	}

	/**
	 * 查看退款原因
	 * 
	 * @author huwei
	 * @date 2018年6月15日
	 */
	public RefundCauseBO refundCause(String orderNo) {
		DaikenOrder dbOrder = daikenOrderDao.selectUniqueEntityByProperties(
				new String[] { KemeanConstant.DATA_DELETED, "orderNo" }, new Object[] { false, orderNo });
		DaikenOrderAfterSale dbOrderAfterSale = daikenOrderAfterSaleDao.selectUniqueEntityByProperties(
				new String[] { KemeanConstant.DATA_DELETED, "orderNo" }, new Object[] { false, orderNo });
		RefundCauseBO bo = new RefundCauseBO();
		BeanUtils.copyProperties(dbOrderAfterSale, bo);
		bo.setStatusUserStr(corderService.getUserStatusStr(dbOrder.getStatusUser()));
		bo.setRefundImg(JSONArray.parseArray(dbOrderAfterSale.getRefundImg(), String.class));
		return bo;
	}

	/**
	 * 获取快递公司
	 * 
	 * @author huwei
	 * @date 2018年6月22日
	 */
	public List<CourierCompanyBO> getCourierCompany() {
		return Arrays.asList(new CourierCompanyBO("申通快递", "shentong"), new CourierCompanyBO("EMS", "ems"),
				new CourierCompanyBO("顺丰速运", "shunfeng"), new CourierCompanyBO("韵达快递", "yunda"),
				new CourierCompanyBO("圆通速递", "yuantong"), new CourierCompanyBO("中通快递", "zhongtong"),
				new CourierCompanyBO("百世汇通", "huitongkuaidi"), new CourierCompanyBO("天天快递", "tiantian"),
				new CourierCompanyBO("宅急送", "zhaijisong"), new CourierCompanyBO("鑫飞鸿", "xinhongyukuaidi"));
	}

	/**
	 * 发货
	 * 
	 * @author huwei
	 * @date 2018年6月22日
	 */
	public KemeanResult<String> sendGoods(SendGoodsPO sendGoodsPO) {
		return new KemeanResult<>();
	}

	public String getBusinessStatusStr(Integer shopStatus) {
		String userStatusStr = "";
		if (shopStatus.equals(KemeanOrderEnum.OrderStatusBusiness.WAIT_PAY.getStatus())) {
			userStatusStr = "待用户支付";
		}
		if (shopStatus.equals(KemeanOrderEnum.OrderStatusBusiness.CANCLE_NOT_PAY.getStatus())) {
			userStatusStr = "未支付取消 ";
		}
		if (shopStatus.equals(KemeanOrderEnum.OrderStatusBusiness.REFUSE.getStatus())) {
			userStatusStr = "拒绝接单";
		}
		if (shopStatus.equals(KemeanOrderEnum.OrderStatusBusiness.WAIT_ACCEPT.getStatus())) {
			userStatusStr = "待接单";
		}
		if (shopStatus.equals(KemeanOrderEnum.OrderStatusBusiness.ACCEPT.getStatus())) {
			userStatusStr = "确认接单、待发货";
		}
		if (shopStatus.equals(KemeanOrderEnum.OrderStatusBusiness.SHIP.getStatus())) {
			userStatusStr = "已发货";
		}
		if (shopStatus.equals(KemeanOrderEnum.OrderStatusBusiness.FINISH.getStatus())) {
			userStatusStr = "已完成";
		}
		if (shopStatus.equals(KemeanOrderEnum.OrderStatusBusiness.AFTER_SALE.getStatus())) {
			userStatusStr = "售后";
		}
		if (shopStatus.equals(KemeanOrderEnum.OrderStatusBusiness.AFTER_SALE_REFUND_ED.getStatus())) {
			userStatusStr = "确认退款";
		}
		if (shopStatus.equals(KemeanOrderEnum.OrderStatusBusiness.AFTER_SALE_.getStatus())) {
			userStatusStr = "拒绝退款";
		}
		return userStatusStr;
	}

	/**
	 * 确认退款按钮
	 * 
	 * @author huwei
	 * @date 2018年7月3日
	 */
	public KemeanResult<String> confirmRefund(String orderNo) {
		// 修改订单状态
		DaikenOrder dbOrder = daikenOrderDao.selectUniqueEntityByProperty("orderNo", orderNo);
		dbOrder.setStatusUser(KemeanOrderEnum.OrderStatusUser.REFUND_WAIT.getStatus());
		dbOrder.setUpdateTime(new Date());
		daikenOrderDao.updateByPrimaryKeySelective(dbOrder);
		return new KemeanResult<>();
	}

	/**
	 * 拒绝退款按钮
	 * 
	 * @author huwei
	 * @date 2018年7月5日
	 */
	public KemeanResult<String> rejectRefund(String orderNo) {
		DaikenOrder dbOrder = daikenOrderDao.selectUniqueEntityByProperty("orderNo", orderNo);
		dbOrder.setStatusUser(KemeanOrderEnum.OrderStatusUser.REFUND_RE.getStatus());
		dbOrder.setUpdateTime(new Date());
		daikenOrderDao.updateByPrimaryKeySelective(dbOrder);
		return new KemeanResult<String>();
	}

	/**
	 * 订单 取消
	 * 
	 * @author huwei
	 * @date 2018年7月5日
	 */
	public KemeanResult<String> cancleOrder(String orderNo) {
		DaikenOrder dbOrder = daikenOrderDao.selectUniqueEntityByProperty("orderNo", orderNo);
		dbOrder.setStatusUser(KemeanOrderEnum.OrderStatusUser.REFUND_WAIT.getStatus());
		dbOrder.setUpdateTime(new Date());
		daikenOrderDao.updateByPrimaryKeySelective(dbOrder);
		return new KemeanResult<String>();
	}
}
